name: CI	

on:	
  push:
  pull_request:

env:	
  COMPOSER_TOKEN: ${{ secrets.GITHUB_TOKEN }}	
  COVERAGE: '1'
  working_directory: ./
  php_extensions: 'apcu, bcmath, ctype, curl, dom, iconv, intl, json, mbstring, opcache, openssl, pdo, pdo_pgsql, pcntl, pcov, posix, redis, session, simplexml, sockets, tokenizer, xml, xmlwriter, zip'
  key: cache-v0.1
  DATABASE_URL: 'postgres://postgres@postgres@localhost:5432/testing?charset=UTF-8'

jobs:	
  lint:
    runs-on: '${{ matrix.operating_system }}'
    timeout-minutes: 20	
    strategy:	
      matrix:
        operating_system:
          - ubuntu-latest
        php_versions:
          - '7.4'
      fail-fast: false
    env:	
      PHP_CS_FIXER_FUTURE_MODE: '0'
    name: 'Lint / PHP ${{ matrix.php_versions }} @ ${{ matrix.operating_system }}'
    steps:	
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Setup cache environment'
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: '${{ matrix.php_versions }}'
          extensions: '${{ env.php_extensions }}'
          key: '${{ env.key }}'
      - name: 'Cache extensions'
        uses: actions/cache@v1
        with:
          path: '${{ steps.cache-env.outputs.dir }}'
          key: '${{ steps.cache-env.outputs.key }}'
          restore-keys: '${{ steps.cache-env.outputs.key }}'
      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2	
        with:	
          php-version: ${{ matrix.php_versions }}
          extensions: '${{ env.php_extensions }}'
          ini-values: memory_limit=-1	
          tools: pecl, composer
          coverage: none
      - name: 'Setup problem matchers for PHP (aka PHP error logs)'
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'
      - name: 'Setup problem matchers for PHPUnit'
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'
      - name: 'Get Composer cache directory'
        id: composer-cache
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'
        working-directory: '${{env.working_directory}}'
      - name: 'Cache dependencies'
        uses: actions/cache@v1
        with:
          path: '${{ steps.composer-cache.outputs.dir }}'
          key: '${{ runner.os }}-composer-${{ hashFiles(''**/composer.lock'') }}'
          restore-keys: '${{ runner.os }}-composer-'
      - name: 'Validate composer.json and composer.lock'
        run: 'composer validate'
        working-directory: '${{env.working_directory}}'
      - name: 'Install PHP dependencies with Composer'
        run: 'composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader'
        working-directory: '${{env.working_directory}}'
      - name: 'Linting PHP source files'
        run: 'vendor/bin/ecs check --config=ecs.yml .'
  unit_testing:
    strategy:
      fail-fast: false
      matrix:
        operating_system:
          - 'ubuntu-latest'
        postgres:
          # - '10'
          - '11'
          # - '12'
        php_versions:
          # - '7.2'
          # - '7.3'
          - '7.4'
          # - '8.0'
    runs-on: '${{ matrix.operating_system }}'
    name: 'Unit Testing / PHP ${{ matrix.php_versions }} @ ${{ matrix.operating_system }} with Postgres ${{ matrix.postgres }}'
    needs:
      - lint
    services:
      postgres:
        image: postgres:${{ matrix.postgres }}
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testing
          POSTGRES_HOST: localhost
        ports:
          - 5432/tcp
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1
      - name: apt-get
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libpq-dev postgresql-client
      - name: 'Setup cache environment'
        id: cache-env
        uses: shivammathur/cache-extensions@v1
        with:
          php-version: '${{ matrix.php_versions }}'
          extensions: '${{ env.php_extensions }}'
          key: '${{ env.key }}'
      - name: 'Cache extensions'
        uses: actions/cache@v1
        with:
          path: '${{ steps.cache-env.outputs.dir }}'
          key: '${{ steps.cache-env.outputs.key }}'
          restore-keys: '${{ steps.cache-env.outputs.key }}'
      - name: 'Setup PHP'
        uses: shivammathur/setup-php@v2
        with:
          php-version: '${{ matrix.php_versions }}'
          extensions: '${{ env.php_extensions }}'
          ini-values: 'date.timezone=UTC, upload_max_filesize=20M, post_max_size=20M, memory_limit=512M, short_open_tag=Off'
          coverage: xdebug
          tools: 'phpunit'
      - name: 'Setup problem matchers for PHP (aka PHP error logs)'
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/php.json"'
      - name: 'Setup problem matchers for PHPUnit'
        run: 'echo "::add-matcher::${{ runner.tool_cache }}/phpunit.json"'
      - name: 'Get Composer cache directory'
        id: composer-cache
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'
        working-directory: '${{env.working_directory}}'
      - name: 'Cache dependencies'
        uses: actions/cache@v1
        with:
          path: '${{ steps.composer-cache.outputs.dir }}'
          key: '${{ runner.os }}-composer-${{ hashFiles(''**/composer.lock'') }}'
          restore-keys: '${{ runner.os }}-composer-'
      - name: 'Validate composer.json and composer.lock'
        run: 'composer validate'
        working-directory: '${{env.working_directory}}'
      - name: 'Install PHP dependencies with Composer'
        run: 'composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader'
        working-directory: '${{env.working_directory}}'
      - name: 'Check installed components for PostgreSQL'
        env:
          # use localhost for the host here because we are running the job on the VM.
          # If we were running the job on in a container this would be postgres
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: postgres
          PGPORT: ${{ jobs.unit_testing.services.postgres.ports[5432] }} # get randomly assigned published port
          PGDATABASE: postgres
        run: |
            pg_isready
            psql
      - name: 'Creating Database'
        env:
          # use localhost for the host here because we are running the job on the VM.
          # If we were running the job on in a container this would be postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ jobs.unit_testing.services.postgres.ports[5432] }} # get randomly assigned published port
        run: psql postgres -U postgres -tc "SELECT 1 FROM pg_database WHERE datname = 'testing'" | grep -q 1 || psql postgres -U postgres -c "CREATE DATABASE testing"
      - name: 'Run Unit Tests with PHPUnit'
        env:
          # use localhost for the host here because we are running the job on the VM.
          # If we were running the job on in a container this would be postgres
          POSTGRES_HOST: localhost
          POSTGRES_PORT: ${{ jobs.unit_testing.services.postgres.ports[5432] }} # get randomly assigned published port
        run: './vendor/bin/phpunit --configuration phpunit.github.xml --coverage-clover build/logs/clover.xml'
        working-directory: '${{env.working_directory}}'
      - name: 'Send Code Coverage Report'
        continue-on-error: true
        timeout-minutes: 1
        run: './vendor/bin/php-coveralls -v'
        working-directory: '${{env.working_directory}}'
